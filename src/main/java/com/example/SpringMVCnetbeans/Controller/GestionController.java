/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.example.SpringMVCnetbeans.Controller;

import Repository.CompteRepository;
import com.example.SpringMVCnetbeans.Entity.Compte;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

/**
 *
 * @author rcotche.cdi
 */
@Controller
@RequestMapping(path = "/manager")
@Service
public class GestionController {

    @RequestMapping(value = "/addCompte", method = RequestMethod.POST)
    public String sample() {
        return "ajouterCompte";
    }

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CompteRepository compteRepository;

    @RequestMapping(value = "/add", method = RequestMethod.POST) // Map ONLY POST Requests
    public @ResponseBody
    ModelAndView addNewUser(@RequestParam String login,
            @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the POST or POST request
        try {
            Compte n = new Compte();
            n.setLogin(login);
            n.setPassword(encryptThisString(password));
            compteRepository.save(n);
        } catch (Exception e) {
            System.out.println("erreur" + e);
        }
        return new ModelAndView("redirect:" + "all");
    }

    @RequestMapping(value = "/test", method = RequestMethod.POST)
    public @ResponseBody
    Compte getCompte(@RequestParam String password, @RequestParam String login) {
        /*if(compteRepository.existsById(id)){
            System.out.println("ui");
        }
        return compteRepository.findOneById(id);*/
        return compteRepository.findOneByPasswordAndLogin(password, login);
    }

    @RequestMapping(value = "/delete", method = RequestMethod.POST) // Map ONLY POST Requests
    public @ResponseBody
    void deleteUser(@RequestParam Long id) {
        compteRepository.deleteById(id);
    }

    @RequestMapping(value = "/update", method = RequestMethod.POST) // Map ONLY POST Requests
    public @ResponseBody
    void updateUser(@RequestParam String login, @RequestParam String password, @RequestParam Long id) {
        if (compteRepository.existsById(id)) {
            Compte unCompte = new Compte(id);
            unCompte.setLogin(login);
            unCompte.setPassword(encryptThisString(password));
            compteRepository.save(unCompte);
        }
    }

    @RequestMapping(value = "/all", method = RequestMethod.GET)
    public String showAll(Model model) {
        model.addAttribute("comptes", compteRepository.findAll());
        return "resultat";
    }

    public static String encryptThisString(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-512");
            byte[] messageDigest = md.digest(password.getBytes());

            BigInteger no = new BigInteger(1, messageDigest);
            String hashtext = no.toString(16);

            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }

            return hashtext;
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
}
